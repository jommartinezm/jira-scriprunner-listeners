if(issue.fields.parent.key != null){
    def parentKey = issue.fields.parent.key
    //Obtiene las incidencias del parent
    def childIssues = get("/rest/api/2/search")
        .queryString("jql", "parent=${parentKey}")
        .asObject(Map)
        .body
        .issues as List<Map>
    def listProgress = []
    def listWeight = []
    def newProgress = 0
    def sumWeight = 0
    for (childIssue in childIssues) {
        if(childIssue.fields.issuetype.id == "${KR_ISSUETYPE_ID}"){
            //Recuperamos el valor del campo Progress y actualizamos las variables
            if(childIssue.fields.("${PROGRESS_CUSTOMFIELD_NAME}") != null){
                listProgress << childIssue.fields.("${PROGRESS_CUSTOMFIELD_NAME}")
            } else{
                listProgress << 0
            }
            
            if(childIssue.fields.("${WEIGHT_CUSTOMFIELD_NAME}") != null){
                listWeight << childIssue.fields.("${WEIGHT_CUSTOMFIELD_NAME}")
                sumWeight = sumWeight + childIssue.("${WEIGHT_CUSTOMFIELD_NAME}")
            } else {
                listWeight << 1
                sumWeight = sumWeight + 1
            }
        }
    }
    //Calculamos el progreso final
    for(int i in 1..listProgress.size){
        newProgress = newProgress + (listProgress.get(i-1)*(listWeight.get(i-1)*100)/sumWeight)/100
    }
    logger.info("El progreso del Objetivo es: ${newProgress}")
            
    // Now update the parent issue
    def result = put("/rest/api/2/issue/${parentKey}")
        .header('Content-Type', 'application/json')
        .body([
            fields: [
                ("${PROGRESS_CUSTOMFIELD_NAME}") : newProgress
            ]
        ])
        .asString()
    
        // check that updating the parent issue worked
    assert result.status >= 200 && result.status < 300
}
